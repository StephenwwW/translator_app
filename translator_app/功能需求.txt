# 雙向翻譯應用程式 - 功能需求規格書


### **1. 專案總覽**

[cite_start]本專案旨在開發一個基於 Python 的桌面應用程式，提供即時、高品質的雙向文字翻譯和語音播放功能 [cite: 1][cite_start]。應用程式將採用 PyQt6 建構現代化的圖形使用者介面(GUI) ，並整合多種翻譯與語音合成服務，以滿足使用者對彈性和品質的需求。

---

### **2. 核心功能**

#### **2.1 文字翻譯**

* **雙向翻譯支援:** 應用程式需支援以下六個方向的語言互譯：
    * [cite_start]日文 ⇄ 英文 
    * [cite_start]日文 ⇄ 中文 
    * [cite_start]英文 ⇄ 中文 
* **翻譯服務整合:**
    * [cite_start]**服務選項:** 使用者可以透過下拉式選單在多個翻譯引擎之間進行選擇 。
    * [cite_start]**品質要求:** 翻譯結果應力求流暢自然，接近人工翻譯水準，避免生硬的機器翻譯感 。
    * **引擎來源:**
        * [cite_start]**免費選項:** 必須整合完全免費的翻譯服務，例如透過申請免費的 API 金鑰來達成 。
        * [cite_start]**API 金鑰選項:** 為了達到最高的翻譯品質，應支援使用者使用自己的 API 金鑰來整合以下進階服務：Google Cloud Translation API、Google 翻譯、Microsoft Translator API、DeepL API 。
* [cite_start]**文本長度:** 翻譯功能不應對輸入的文本長度設有任何限制 。

#### **2.2 語音播放 (TTS - Text-to-Speech)**

* [cite_start]**多引擎支援:** 使用者可以透過下拉式選單選擇不同的語音合成引擎 。
* **整合選項:** 需至少支援以下語音合成服務：
    * [cite_start]`pyttsx3` 
    * [cite_start]`gTTS` 
    * [cite_start]`edge_tts` 
* **播放控制:** 每個翻譯面板旁都應有獨立的播放按鈕，用以朗讀該面板內的文字。

---

### **3. 使用者介面 (GUI) 與互動 (Interaction)**

#### **3.1 介面佈局**

* [cite_start]**主視窗設計:** 採用單一主視窗，內部劃分為左右兩個垂直的文字面板 。
* [cite_start]**即時顯示:** 兩個面板應能同時支援文字輸入和翻譯結果的顯示 。

#### **3.2 互動流程與控制**

* **語言選擇:**
    * 每個文字面板上方應有各自的語言選擇下拉式選單。
    * [cite_start]提供一個「交換語言」按鈕，點擊後能立即對調左右兩側的來源與目標語言 。
* [cite_start]**主要輸入端:** 以使用者當前正在輸入文字的面板作為「來源方」，其語言即為來源語言 。
* **自動翻譯:** 當使用者在來源方面板停止輸入一小段時間後，系統應自動觸發翻譯，並將結果顯示在目標方面板。
* **API 金鑰管理:** 提供一個簡單的介面，讓使用者可以輸入並保存用於付費服務的 API 金鑰。金鑰應被安全地儲存在本機。

---

### **4. 技術規格**

* **程式語言:** Python
* [cite_start]**GUI 框架:** PyQt6 
* **核心函式庫:**
    * 翻譯: `deep-translator`、`google-cloud-translate`、`deepl` 等。
    * 語音合成: `pyttsx3`、`gTTS`、`edge-tts`。

---

### **5. 非功能性需求**

* **效能:** 應用程式在進行網路請求（翻譯、TTS）時，GUI 介面必須保持流暢，不得出現凍結或無回應的情況。應使用非同步(asynchronous)技術處理網路相關任務。
* **錯誤處理:** 當 API 呼叫失敗（例如網路中斷、API 金鑰無效）時，應在介面上向使用者顯示清晰、友善的錯誤提示。
* **設定保存:** 應用程式需能記住使用者上次選擇的翻譯服務、語音服務以及語言組合，並在下次啟動時自動載入。